// Code generated by Stan version 2.12

#include <stan/model/model_header.hpp>

namespace model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7 : public prob_grad {
private:
    int N;
    int G;
    int S;
    int C;
    int M;
    vector<int> gene;
    vector<int> sample;
    vector<vector_d> x;
    vector<int> y;
    matrix_d cell_features;
    int N2;
    int S2;
    vector<int> gene2;
    vector<int> sample2;
    vector<int> y2;
    vector<vector<int> > sample_y;
    vector<vector_d> sample_x;
    vector<vector<int> > sample2_y;
    int nu;
public:
    model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7_namespace::model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "C", "int", context__.to_vec());
        C = int(0);
        vals_i__ = context__.vals_i("C");
        pos__ = 0;
        C = vals_i__[pos__++];
        context__.validate_dims("data initialization", "M", "int", context__.to_vec());
        M = int(0);
        vals_i__ = context__.vals_i("M");
        pos__ = 0;
        M = vals_i__[pos__++];
        context__.validate_dims("data initialization", "gene", "int", context__.to_vec(N));
        validate_non_negative_index("gene", "N", N);
        gene = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("gene");
        pos__ = 0;
        size_t gene_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < gene_limit_0__; ++i_0__) {
            gene[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "sample", "int", context__.to_vec(N));
        validate_non_negative_index("sample", "N", N);
        sample = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("sample");
        pos__ = 0;
        size_t sample_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < sample_limit_0__; ++i_0__) {
            sample[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("x", "N", N);
        validate_non_negative_index("x", "C", C);
        x = std::vector<vector_d>(N,vector_d(static_cast<Eigen::VectorXd::Index>(C)));
        context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N,C));
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        size_t x_i_vec_lim__ = C;
        for (size_t i_vec__ = 0; i_vec__ < x_i_vec_lim__; ++i_vec__) {
            size_t x_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
                x[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "cell_features", "matrix_d", context__.to_vec(C,M));
        validate_non_negative_index("cell_features", "C", C);
        validate_non_negative_index("cell_features", "M", M);
        cell_features = matrix_d(static_cast<Eigen::VectorXd::Index>(C),static_cast<Eigen::VectorXd::Index>(M));
        vals_r__ = context__.vals_r("cell_features");
        pos__ = 0;
        size_t cell_features_m_mat_lim__ = C;
        size_t cell_features_n_mat_lim__ = M;
        for (size_t n_mat__ = 0; n_mat__ < cell_features_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < cell_features_m_mat_lim__; ++m_mat__) {
                cell_features(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
        N2 = int(0);
        vals_i__ = context__.vals_i("N2");
        pos__ = 0;
        N2 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S2", "int", context__.to_vec());
        S2 = int(0);
        vals_i__ = context__.vals_i("S2");
        pos__ = 0;
        S2 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "gene2", "int", context__.to_vec(N2));
        validate_non_negative_index("gene2", "N2", N2);
        gene2 = std::vector<int>(N2,int(0));
        vals_i__ = context__.vals_i("gene2");
        pos__ = 0;
        size_t gene2_limit_0__ = N2;
        for (size_t i_0__ = 0; i_0__ < gene2_limit_0__; ++i_0__) {
            gene2[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "sample2", "int", context__.to_vec(N2));
        validate_non_negative_index("sample2", "N2", N2);
        sample2 = std::vector<int>(N2,int(0));
        vals_i__ = context__.vals_i("sample2");
        pos__ = 0;
        size_t sample2_limit_0__ = N2;
        for (size_t i_0__ = 0; i_0__ < sample2_limit_0__; ++i_0__) {
            sample2[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "y2", "int", context__.to_vec(N2));
        validate_non_negative_index("y2", "N2", N2);
        y2 = std::vector<int>(N2,int(0));
        vals_i__ = context__.vals_i("y2");
        pos__ = 0;
        size_t y2_limit_0__ = N2;
        for (size_t i_0__ = 0; i_0__ < y2_limit_0__; ++i_0__) {
            y2[i_0__] = vals_i__[pos__++];
        }

        // validate data
        check_greater_or_equal(function__,"N",N,1);
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"C",C,0);
        check_greater_or_equal(function__,"M",M,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"gene[k0__]",gene[k0__],1);
            check_less_or_equal(function__,"gene[k0__]",gene[k0__],G);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"sample[k0__]",sample[k0__],1);
            check_less_or_equal(function__,"sample[k0__]",sample[k0__],S);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"x[k0__]",x[k0__],0);
            check_less_or_equal(function__,"x[k0__]",x[k0__],1);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
        }
        check_greater_or_equal(function__,"N2",N2,1);
        check_greater_or_equal(function__,"S2",S2,1);
        for (int k0__ = 0; k0__ < N2; ++k0__) {
            check_greater_or_equal(function__,"gene2[k0__]",gene2[k0__],1);
            check_less_or_equal(function__,"gene2[k0__]",gene2[k0__],G);
        }
        for (int k0__ = 0; k0__ < N2; ++k0__) {
            check_greater_or_equal(function__,"sample2[k0__]",sample2[k0__],1);
            check_less_or_equal(function__,"sample2[k0__]",sample2[k0__],S2);
        }
        for (int k0__ = 0; k0__ < N2; ++k0__) {
            check_greater_or_equal(function__,"y2[k0__]",y2[k0__],0);
        }
        validate_non_negative_index("sample_y", "S", S);
        validate_non_negative_index("sample_y", "G", G);
        sample_y = std::vector<std::vector<int> >(S,std::vector<int>(G,int(0)));
        validate_non_negative_index("sample_x", "S", S);
        validate_non_negative_index("sample_x", "C", C);
        sample_x = std::vector<vector_d>(S,vector_d(static_cast<Eigen::VectorXd::Index>(C)));
        validate_non_negative_index("sample2_y", "S2", S2);
        validate_non_negative_index("sample2_y", "G", G);
        sample2_y = std::vector<std::vector<int> >(S2,std::vector<int>(G,int(0)));
        nu = int(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(sample_y, std::numeric_limits<int>::min());
        stan::math::fill(sample_x,DUMMY_VAR__);
        stan::math::fill(sample2_y, std::numeric_limits<int>::min());
        stan::math::fill(nu, std::numeric_limits<int>::min());

        try {
            current_statement_begin__ = 33;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 34;
                stan::math::assign(get_base1_lhs(get_base1_lhs(sample_y,get_base1(sample,n,"sample",1),"sample_y",1),get_base1(gene,n,"gene",1),"sample_y",2), get_base1(y,n,"y",1));
                current_statement_begin__ = 35;
                stan::math::assign(get_base1_lhs(sample_x,get_base1(sample,n,"sample",1),"sample_x",1), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"));
            }
            current_statement_begin__ = 37;
            for (int n = 1; n <= N2; ++n) {
                current_statement_begin__ = 38;
                stan::math::assign(get_base1_lhs(get_base1_lhs(sample2_y,get_base1(sample2,n,"sample2",1),"sample2_y",1),get_base1(gene2,n,"gene2",1),"sample2_y",2), get_base1(y2,n,"y2",1));
            }
            current_statement_begin__ = 40;
            stan::math::assign(nu, 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"nu",nu,1);

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += ((C * (C - 1)) / 2);
        num_params_r__ += C;
        num_params_r__ += G * C;
        num_params_r__ += C;
        num_params_r__ += M;
        num_params_r__ += M * G;
        num_params_r__ += G;
        num_params_r__ += G;
        num_params_r__ += (C - 1) * S2;
    }

    ~model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("Omega_L")))
            throw std::runtime_error("variable Omega_L missing");
        vals_r__ = context__.vals_r("Omega_L");
        pos__ = 0U;
        context__.validate_dims("initialization", "Omega_L", "matrix_d", context__.to_vec(C,C));
        matrix_d Omega_L(static_cast<Eigen::VectorXd::Index>(C),static_cast<Eigen::VectorXd::Index>(C));
        for (int j2__ = 0U; j2__ < C; ++j2__)
            for (int j1__ = 0U; j1__ < C; ++j1__)
                Omega_L(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(Omega_L);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Omega_L: ") + e.what());
        }

        if (!(context__.contains_r("Omega_sigma")))
            throw std::runtime_error("variable Omega_sigma missing");
        vals_r__ = context__.vals_r("Omega_sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "Omega_sigma", "vector_d", context__.to_vec(C));
        vector_d Omega_sigma(static_cast<Eigen::VectorXd::Index>(C));
        for (int j1__ = 0U; j1__ < C; ++j1__)
            Omega_sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,Omega_sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Omega_sigma: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta", "matrix_d", context__.to_vec(G,C));
        matrix_d theta(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(C));
        for (int j2__ = 0U; j2__ < C; ++j2__)
            for (int j1__ = 0U; j1__ < G; ++j1__)
                theta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_lb_unconstrain(0,theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        if (!(context__.contains_r("theta_mu")))
            throw std::runtime_error("variable theta_mu missing");
        vals_r__ = context__.vals_r("theta_mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_mu", "vector_d", context__.to_vec(C));
        vector_d theta_mu(static_cast<Eigen::VectorXd::Index>(C));
        for (int j1__ = 0U; j1__ < C; ++j1__)
            theta_mu(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(theta_mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_mu: ") + e.what());
        }

        if (!(context__.contains_r("theta_coefs_raw")))
            throw std::runtime_error("variable theta_coefs_raw missing");
        vals_r__ = context__.vals_r("theta_coefs_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_coefs_raw", "vector_d", context__.to_vec(M));
        vector_d theta_coefs_raw(static_cast<Eigen::VectorXd::Index>(M));
        for (int j1__ = 0U; j1__ < M; ++j1__)
            theta_coefs_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(theta_coefs_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_coefs_raw: ") + e.what());
        }

        if (!(context__.contains_r("theta_coefs_per_gene")))
            throw std::runtime_error("variable theta_coefs_per_gene missing");
        vals_r__ = context__.vals_r("theta_coefs_per_gene");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_coefs_per_gene", "vector_d", context__.to_vec(G,M));
        std::vector<vector_d> theta_coefs_per_gene(G,vector_d(static_cast<Eigen::VectorXd::Index>(M)));
        for (int j1__ = 0U; j1__ < M; ++j1__)
            for (int i0__ = 0U; i0__ < G; ++i0__)
                theta_coefs_per_gene[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.vector_unconstrain(theta_coefs_per_gene[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_coefs_per_gene: ") + e.what());
        }

        if (!(context__.contains_r("log_gene_base")))
            throw std::runtime_error("variable log_gene_base missing");
        vals_r__ = context__.vals_r("log_gene_base");
        pos__ = 0U;
        context__.validate_dims("initialization", "log_gene_base", "vector_d", context__.to_vec(G));
        vector_d log_gene_base(static_cast<Eigen::VectorXd::Index>(G));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            log_gene_base(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(log_gene_base);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable log_gene_base: ") + e.what());
        }

        if (!(context__.contains_r("gene_phi")))
            throw std::runtime_error("variable gene_phi missing");
        vals_r__ = context__.vals_r("gene_phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "gene_phi", "vector_d", context__.to_vec(G));
        vector_d gene_phi(static_cast<Eigen::VectorXd::Index>(G));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            gene_phi(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,gene_phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gene_phi: ") + e.what());
        }

        if (!(context__.contains_r("sample2_x")))
            throw std::runtime_error("variable sample2_x missing");
        vals_r__ = context__.vals_r("sample2_x");
        pos__ = 0U;
        context__.validate_dims("initialization", "sample2_x", "vector_d", context__.to_vec(S2,C));
        std::vector<vector_d> sample2_x(S2,vector_d(static_cast<Eigen::VectorXd::Index>(C)));
        for (int j1__ = 0U; j1__ < C; ++j1__)
            for (int i0__ = 0U; i0__ < S2; ++i0__)
                sample2_x[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < S2; ++i0__)
            try {
            writer__.simplex_unconstrain(sample2_x[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sample2_x: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Omega_L;
        (void) Omega_L;  // dummy to suppress unused var warning
        if (jacobian__)
            Omega_L = in__.cholesky_corr_constrain(C,lp__);
        else
            Omega_L = in__.cholesky_corr_constrain(C);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  Omega_sigma;
        (void) Omega_sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            Omega_sigma = in__.vector_lb_constrain(0,C,lp__);
        else
            Omega_sigma = in__.vector_lb_constrain(0,C);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  theta;
        (void) theta;  // dummy to suppress unused var warning
        if (jacobian__)
            theta = in__.matrix_lb_constrain(0,G,C,lp__);
        else
            theta = in__.matrix_lb_constrain(0,G,C);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_mu;
        (void) theta_mu;  // dummy to suppress unused var warning
        if (jacobian__)
            theta_mu = in__.vector_constrain(C,lp__);
        else
            theta_mu = in__.vector_constrain(C);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_coefs_raw;
        (void) theta_coefs_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            theta_coefs_raw = in__.vector_constrain(M,lp__);
        else
            theta_coefs_raw = in__.vector_constrain(M);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_coefs_per_gene;
        size_t dim_theta_coefs_per_gene_0__ = G;
        theta_coefs_per_gene.reserve(dim_theta_coefs_per_gene_0__);
        for (size_t k_0__ = 0; k_0__ < dim_theta_coefs_per_gene_0__; ++k_0__) {
            if (jacobian__)
                theta_coefs_per_gene.push_back(in__.vector_constrain(M,lp__));
            else
                theta_coefs_per_gene.push_back(in__.vector_constrain(M));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  log_gene_base;
        (void) log_gene_base;  // dummy to suppress unused var warning
        if (jacobian__)
            log_gene_base = in__.vector_constrain(G,lp__);
        else
            log_gene_base = in__.vector_constrain(G);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  gene_phi;
        (void) gene_phi;  // dummy to suppress unused var warning
        if (jacobian__)
            gene_phi = in__.vector_lb_constrain(0,G,lp__);
        else
            gene_phi = in__.vector_lb_constrain(0,G);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > sample2_x;
        size_t dim_sample2_x_0__ = S2;
        sample2_x.reserve(dim_sample2_x_0__);
        for (size_t k_0__ = 0; k_0__ < dim_sample2_x_0__; ++k_0__) {
            if (jacobian__)
                sample2_x.push_back(in__.simplex_constrain(C,lp__));
            else
                sample2_x.push_back(in__.simplex_constrain(C));
        }


        // transformed parameters
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_coefs(G, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(M))));

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(theta_coefs,DUMMY_VAR__);

        try {
            current_statement_begin__ = 59;
            for (int g = 1; g <= G; ++g) {
                current_statement_begin__ = 60;
                stan::math::assign(get_base1_lhs(theta_coefs,g,"theta_coefs",1), add(theta_coefs_raw,get_base1(theta_coefs_per_gene,g,"theta_coefs_per_gene",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < M; ++i1__) {
                if (stan::math::is_uninitialized(theta_coefs[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_coefs" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {
            current_statement_begin__ = 64;
            lp_accum__.add(normal_log<propto__>(theta_mu, 0, 1));
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(theta_coefs_raw, 0, 1));
            current_statement_begin__ = 66;
            lp_accum__.add(gamma_log<propto__>(Omega_sigma, 0.10000000000000001, 0.10000000000000001));
            current_statement_begin__ = 67;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(Omega_L, nu));
            current_statement_begin__ = 68;
            for (int g = 1; g <= G; ++g) {
                {
                    Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_tmp(static_cast<Eigen::VectorXd::Index>(C));
                    (void) theta_tmp;  // dummy to suppress unused var warning
                    stan::math::initialize(theta_tmp, DUMMY_VAR__);
                    current_statement_begin__ = 70;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta_coefs_per_gene,g,"theta_coefs_per_gene",1), 0, 1));
                    current_statement_begin__ = 71;
                    stan::math::assign(theta_tmp, add(theta_mu,multiply(cell_features,get_base1(theta_coefs,g,"theta_coefs",1))));
                    current_statement_begin__ = 72;
                    lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(theta,g,"theta",1), theta_tmp, diag_pre_multiply(Omega_sigma,Omega_L)));
                }
            }
            current_statement_begin__ = 76;
            lp_accum__.add(normal_log<propto__>(log_gene_base, 0, 1));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(gene_phi, 0, 1));
            current_statement_begin__ = 78;
            for (int s = 1; s <= S; ++s) {
                {
                    Eigen::Matrix<T__,Eigen::Dynamic,1>  log_expected_rate(static_cast<Eigen::VectorXd::Index>(G));
                    (void) log_expected_rate;  // dummy to suppress unused var warning
                    stan::math::initialize(log_expected_rate, DUMMY_VAR__);
                    current_statement_begin__ = 80;
                    stan::math::assign(log_expected_rate, add(log_gene_base,log(multiply(theta,get_base1(sample_x,s,"sample_x",1)))));
                    current_statement_begin__ = 81;
                    lp_accum__.add(neg_binomial_2_log_log<propto__>(get_base1(sample_y,s,"sample_y",1), log_expected_rate, gene_phi));
                }
            }
            current_statement_begin__ = 85;
            for (int s = 1; s <= S2; ++s) {
                {
                    Eigen::Matrix<T__,Eigen::Dynamic,1>  log_expected_rate(static_cast<Eigen::VectorXd::Index>(G));
                    (void) log_expected_rate;  // dummy to suppress unused var warning
                    stan::math::initialize(log_expected_rate, DUMMY_VAR__);
                    current_statement_begin__ = 87;
                    stan::math::assign(log_expected_rate, add(log_gene_base,log(multiply(theta,get_base1(sample2_x,s,"sample2_x",1)))));
                    current_statement_begin__ = 88;
                    lp_accum__.add(neg_binomial_2_log_log<propto__>(get_base1(sample2_y,s,"sample2_y",1), log_expected_rate, gene_phi));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Omega_L");
        names__.push_back("Omega_sigma");
        names__.push_back("theta");
        names__.push_back("theta_mu");
        names__.push_back("theta_coefs_raw");
        names__.push_back("theta_coefs_per_gene");
        names__.push_back("log_gene_base");
        names__.push_back("gene_phi");
        names__.push_back("sample2_x");
        names__.push_back("theta_coefs");
        names__.push_back("y_rep");
        names__.push_back("log_lik");
        names__.push_back("Omega");
        names__.push_back("tau");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(C);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S2);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dims__.push_back(C);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        matrix_d Omega_L = in__.cholesky_corr_constrain(C);
        vector_d Omega_sigma = in__.vector_lb_constrain(0,C);
        matrix_d theta = in__.matrix_lb_constrain(0,G,C);
        vector_d theta_mu = in__.vector_constrain(C);
        vector_d theta_coefs_raw = in__.vector_constrain(M);
        vector<vector_d> theta_coefs_per_gene;
        size_t dim_theta_coefs_per_gene_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_theta_coefs_per_gene_0__; ++k_0__) {
            theta_coefs_per_gene.push_back(in__.vector_constrain(M));
        }
        vector_d log_gene_base = in__.vector_constrain(G);
        vector_d gene_phi = in__.vector_lb_constrain(0,G);
        vector<vector_d> sample2_x;
        size_t dim_sample2_x_0__ = S2;
        for (size_t k_0__ = 0; k_0__ < dim_sample2_x_0__; ++k_0__) {
            sample2_x.push_back(in__.simplex_constrain(C));
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < C; ++k_0__) {
                vars__.push_back(Omega_L(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < C; ++k_0__) {
            vars__.push_back(Omega_sigma[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(theta(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < C; ++k_0__) {
            vars__.push_back(theta_mu[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(theta_coefs_raw[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < M; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(theta_coefs_per_gene[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(log_gene_base[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(gene_phi[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < S2; ++k_0__) {
                vars__.push_back(sample2_x[k_0__][k_1__]);
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector<vector_d> theta_coefs(G, (vector_d(static_cast<Eigen::VectorXd::Index>(M))));

        try {
            current_statement_begin__ = 59;
            for (int g = 1; g <= G; ++g) {
                current_statement_begin__ = 60;
                stan::math::assign(get_base1_lhs(theta_coefs,g,"theta_coefs",1), add(theta_coefs_raw,get_base1(theta_coefs_per_gene,g,"theta_coefs_per_gene",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < M; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(theta_coefs[k_0__][k_1__]);
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<int> y_rep(N, 0);
        vector<double> log_lik(N, 0.0);
        matrix_d Omega(static_cast<Eigen::VectorXd::Index>(C),static_cast<Eigen::VectorXd::Index>(C));
        (void) Omega;  // dummy to suppress unused var warning
        matrix_d tau(static_cast<Eigen::VectorXd::Index>(C),static_cast<Eigen::VectorXd::Index>(C));
        (void) tau;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(y_rep, std::numeric_limits<int>::min());
        stan::math::fill(log_lik,DUMMY_VAR__);
        stan::math::fill(Omega,DUMMY_VAR__);
        stan::math::fill(tau,DUMMY_VAR__);

        try {
            current_statement_begin__ = 96;
            stan::math::assign(Omega, multiply_lower_tri_self_transpose(Omega_L));
            current_statement_begin__ = 97;
            stan::math::assign(tau, quad_form_diag(Omega_L,Omega_sigma));
            current_statement_begin__ = 99;
            for (int n = 1; n <= N; ++n) {
                {
                    double log_expected_rate(0.0);
                    (void) log_expected_rate;  // dummy to suppress unused var warning
                    stan::math::initialize(log_expected_rate, std::numeric_limits<double>::quiet_NaN());
                    current_statement_begin__ = 101;
                    stan::math::assign(log_expected_rate, (get_base1(log_gene_base,get_base1(gene,n,"gene",1),"log_gene_base",1) + log(multiply(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_uni(get_base1(gene,n,"gene",1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "theta"),get_base1(x,n,"x",1)))));
                    current_statement_begin__ = 102;
                    stan::math::assign(get_base1_lhs(y_rep,n,"y_rep",1), neg_binomial_2_log_rng(log_expected_rate,get_base1(gene_phi,get_base1(gene,n,"gene",1),"gene_phi",1), base_rng__));
                    current_statement_begin__ = 103;
                    stan::math::assign(get_base1_lhs(log_lik,n,"log_lik",1), neg_binomial_2_log_log(get_base1(y,n,"y",1),log_expected_rate,get_base1(gene_phi,get_base1(gene,n,"gene",1),"gene_phi",1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_rep[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < C; ++k_0__) {
                vars__.push_back(Omega(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < C; ++k_0__) {
                vars__.push_back(tau(k_0__, k_1__));
            }
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega_L" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Omega_sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_coefs_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_coefs_per_gene" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_gene_base" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gene_phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sample2_x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_coefs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= ((C * (C - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Omega_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Omega_sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_coefs_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_coefs_per_gene" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_gene_base" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gene_phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (C - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sample2_x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= M; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_coefs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= C; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

} // namespace

typedef model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7_namespace::model6_2_markergenes_a181b2be649df2bf097dcb4c6a9053f7 stan_model;

